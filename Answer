## First Question:
   1.An interrupt is an indication to a thread that it should stop what it is doing and do something else. It's up to the programmer to decide exactly how a thread responds to an interrupt, but it is very common for the thread to terminate. 
   2.In this code the target thread has been sleeping (by calling sleep()) , it will be interrupted , meaning that it stops waiting for what was waiting for and receives an InterruptedException instead.

## Output:
The outputs of this code are : "
                     Thread was interrupted!
                     Thread will be finished here!!


## Second Question:
   1.In this code the run() method directly on a Runnable object in Java will not start a new thread. Instead, the run() method will execute in the current thread, just like any other method call. This means that the code within the run() method will run sequentially in the calling thread, and no multithreading behavior will occur.
The run() method is called directly, so the message will be printed from the main thread.   

## Output:
The output of this code is :
                     Runnig in : main


## Third Question:
   The join method allows one thread to wait for the completion of another. If t is a Thread object whose thread is currently executing, t. join(); causes the current thread to pause execution until t 's thread terminates.

## Output:
The outputs of this code are:
                     Running in: Thread-0
                     Back to: main

   
